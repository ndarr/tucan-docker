#!/usr/bin/env python
from __future__ import print_function
import os
import argparse
from netrc import netrc
from hashlib import md5

from tucan import get_grades


def mail(recipient, subject, body):
    import subprocess

    proc = subprocess.Popen(["mail", "-s", subject, recipient],
                            stdin=subprocess.PIPE)
    proc.stdin.write(body)
    proc.stdin.close()


def notify(notification_msg):
    from subprocess import Popen

    Popen(['notify-send', notification_msg])


def parse_netrc():
    netrc_username, _, netrc_password = netrc().authenticators("www.tucan.tu-darmstadt.de")
    return netrc_username, netrc_password


def update_db(db, grades):
    if os.path.isfile(db):
        with open(db) as db_fp:
            old_digests = set(db_fp.read().split(os.linesep))
    else:
        old_digests = set()

    new_digests = {md5(repr(g)).hexdigest(): g for g in grades}

    if set(new_digests.keys()) != old_digests:
        with open(db, "w") as db_fp:
            db_fp.write(os.linesep.join(old_digests.union(new_digests.keys())))

        return [v for k, v in new_digests.items() if k not in old_digests]

    return None


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="TUCaN CLI",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("--mail", "-m", type=str,
                        help="send email to this address on changes")
    parser.add_argument("--db", type=str,
                        default=os.path.expanduser("~/.tucandb"),
                        help="database file")
    parser.add_argument("--new", help="print only new grades", action="store_true")
    parser.add_argument("--notify", "-n", action="store_true",
                        help="send desktop notification on new grades")
    parser.add_argument("--json", "-j", help="output json", action="store_true")
    args = parser.parse_args()

    username, password = parse_netrc()
    grades = get_grades(username, password)
    if len(grades[0]) > 0:
        if args.mail or args.new or args.notify:
            new_grades = update_db(args.db, grades)

            if new_grades:
                msg = os.linesep.join([g[0] + ": " + g[2] for g in new_grades])
                if args.mail:
                    mail(args.mail, "New Grade in TUCaN", msg)
                elif args.notify:
                    notify(msg)
                else:
                    print(msg)
        else:
            if args.json:
                import json

                print(json.dumps(list(grades)))
            else:
                for grade in grades:
                    print(grade[0] + ": " + grade[2])
    else:
        msg = "No grades for the current semester"
        print(msg)
